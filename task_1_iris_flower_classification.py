# -*- coding: utf-8 -*-
"""Task 1: IRIS FLOWER CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19MK_o0o3ufAs3B4zUp2DA3ArvNOVjmoe

Ananya Dey

Iris flower has three species; setosa, versicolor, and virginica, which differs according to their
measurements. Now assume that you have the measurements of the iris flowers according to
their species, and here your task is to train a machine learning model that can learn from the
measurements of the iris species and classify them.
Although the Scikit-learn library provides a dataset for iris flower classification, you can also
download the same dataset from here for the task of iris flower classification with Machine
Learning. 

DOWNLOAD DATASET FROM HERE: https://www.kaggle.com/datasets/saurabh00007/iriscsv
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

#read dataset
df = pd.read_csv("Iris.csv")

df.head(10)

df.shape

df.describe()

df.info

df.isnull().sum()

df.Species.value_counts

#define target and features
X= df[['Id','SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]
Y= df['Species']

X

Y

#train/test split

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.20,random_state=42)

# Training the Linear Regression Model

from sklearn.linear_model import LogisticRegression

#creating an instance for the LogisticRegression model
lr = LogisticRegression()

#Training the model on train dataset
lr.fit(X,Y)

#Training the model with the training set

lr.fit(X_train,y_train)

# Getting predictions from the model for the given examples.
predictions = lr.predict(X)

# Compare with the actual charges

Scores = pd.DataFrame({'Actual':Y ,'Predictions':predictions})
Scores.head()

y_test_hat=lr.predict(X_test)

#check the Accuracy using Linear Regression

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_test_hat)*100,'%')

#As accuracy is 100% so as to recheck the more accurate results 
#doing the same with SVM for more accurate results 
# support vector machine algorithm
from sklearn.svm import SVC
svn = SVC()
svn.fit(X_train, y_train)

# predict from the test dataset
predictions = svn.predict(X_test)

# calculate the accuracy
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predictions)

accuracy=accuracy_score(y_test,predictions)*100
accuracy

# A detailed classification report
from sklearn.metrics import classification_report
print (classification_report(y_test,predictions))

"""Accuracy is one metric for evaluating classification models. Informally, accuracy is the fraction of predictions our model got right. Formally, accuracy has the following definition:

Accuracy= No. of correct predictions/Total no. of predictions

Accuracy=  (TP + TN) / (TP+TN+PF+FN)

Precision= TP/ (TP+FP) i.e. TP/Total predicted positive

Recall= TP/ (TP+FN) i.e. TP / Total Actual positive

F-beta Score= ((1+beta2) * Precision * Recall) / (beta2 * Precision + Recall)


"""